// Change for empty string to remove !important
$importantize: "!important";

@for $i from 0 through $loop-limit {
  @for $j from 1 through length($box-model-sides) {
    .#{nth($box-model-abbr, $j)}-#{$i*$ebm-times} {
      // For <IE8
      #{nth($box-model-sides, $j)}: ($i*$ebm-times) + px #{$importantize};
      // REMs for modern browsers
      @if $px-to-rems == true {
        #{nth($box-model-sides, $j)}: px-to-rem($i*$ebm-times) #{$importantize};
      }
    }
  }
}

// PADDING VERTICAL & HORIZONTAL
@for $i from 0 through $loop-limit {
  .pv-#{$i*$ebm-times} {
    padding-top: ($i*$ebm-times) + px #{$importantize};
    padding-bottom: ($i*$ebm-times) + px #{$importantize};
    @if $px-to-rems == true {
      padding-top: px-to-rem($i*$ebm-times) #{$importantize};
      padding-bottom: px-to-rem($i*$ebm-times) #{$importantize};
    }
  }
}

@for $i from 0 through $loop-limit {
  .ph-#{$i*$ebm-times} {
    padding-left: ($i*$ebm-times) + px #{$importantize};
    padding-right: ($i*$ebm-times) + px #{$importantize};
    @if $px-to-rems == true {
      padding-left: px-to-rem($i*$ebm-times) #{$importantize};
      padding-right: px-to-rem($i*$ebm-times) #{$importantize};
    }
  }
}

// MARGIN VERTICAL & HORIZONTAL
@for $i from 0 through $loop-limit {
  .mv-#{$i*$ebm-times} {
    margin-top: ($i*$ebm-times) + px #{$importantize};
    margin-bottom: ($i*$ebm-times) + px #{$importantize};
    @if $px-to-rems == true {
      margin-top: px-to-rem($i*$ebm-times) #{$importantize};
      margin-bottom: px-to-rem($i*$ebm-times) #{$importantize};
    }
  }
}

@for $i from 0 through $loop-limit {
  .mh-#{$i*$ebm-times} {
    margin-left: ($i*$ebm-times) + px #{$importantize};
    margin-right: ($i*$ebm-times) + px #{$importantize};
    @if $px-to-rems == true {
      margin-left: px-to-rem($i*$ebm-times) #{$importantize};
      margin-right: px-to-rem($i*$ebm-times) #{$importantize};
    }
  }
}
